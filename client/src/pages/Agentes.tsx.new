import { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQueryClient } from '@tanstack/react-query';
import { v4 as uuidv4 } from 'uuid';
import { useToast } from '@/components/ui/use-toast';

// Types
type AgentType = 'llm' | 'workflow' | 'sequential' | 'a2a';

interface FormToolParameter {
  id: string;
  name: string;
  type: string;
  description: string;
  required: boolean;
  defaultValue?: string;
}

interface FormTool {
  id: string;
  name: string;
  description: string;
  parameters: FormToolParameter[];
  enabled: boolean;
  required?: boolean;
  condition?: string;
  returnType?: string;
}

interface FormSafetySetting {
  id: string;
  category: string;
  threshold: string;
  enabled: boolean;
  condition: string;
}

interface FormAgentState {
  id: string;
  name: string;
  description: string;
  type: AgentType;
  version: string;
  tools: FormTool[];
  safetySettings: FormSafetySetting[];
  model?: string;
  temperature?: number;
  maxTokens?: number;
  topP?: number;
  topK?: number;
  instruction?: string;
  agents?: string[];
  condition?: string;
}

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';

// Default values for new agents
const getDefaultAgentConfig = (type: AgentType): FormAgentState => ({
  id: `agent-${uuidv4()}`,
  name: 'Novo Agente',
  description: '',
  type,
  version: '1.0.0',
  tools: [],
  safetySettings: [],
  model: 'gemini-pro',
  temperature: 0.7,
  maxTokens: 2048,
  topP: 0.9,
  topK: 40,
});

const Agentes = () => {
  // Hooks
  const { id } = useParams<{ id?: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // State
  const [agentState, setAgentState] = useState<FormAgentState>(() => getDefaultAgentConfig('llm'));
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isToolDialogOpen, setIsToolDialogOpen] = useState(false);
  const [editingToolIndex, setEditingToolIndex] = useState<number | null>(null);
  const [currentEditingTool, setCurrentEditingTool] = useState<FormTool | null>(null);
  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);
  const [toolToDelete, setToolToDelete] = useState<number | null>(null);

  // Load agent data when component mounts or id changes
  useEffect(() => {
    const loadAgentData = async () => {
      if (!id) {
        setIsLoading(false);
        return;
      }

      try {
        setIsLoading(true);
        // TODO: Implement agent data loading
        // const agent = await agentService.getAgent(id);
        // setAgentState(agent);
      } catch (error) {
        console.error('Error loading agent:', error);
        toast({
          title: 'Erro',
          description: 'Não foi possível carregar o agente.',
          variant: 'destructive',
        });
        navigate('/agentes');
      } finally {
        setIsLoading(false);
      }
    };

    loadAgentData();
  }, [id, navigate, toast]);

  const handleSaveAgent = useCallback(async (): Promise<boolean> => {
    try {
      setIsSaving(true);
      // TODO: Implement save logic
      toast({
        title: 'Sucesso',
        description: 'Agente salvo com sucesso!',
      });
      return true;
    } catch (error) {
      console.error('Error saving agent:', error);
      toast({
        title: 'Erro',
        description: 'Ocorreu um erro ao salvar o agente.',
        variant: 'destructive',
      });
      return false;
    } finally {
      setIsSaving(false);
    }
  }, [toast]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const saved = await handleSaveAgent();
    if (saved) {
      navigate('/agentes');
    }
  };

  const openToolDialog = useCallback((index: number = -1) => {
    if (index >= 0 && index < agentState.tools.length) {
      setCurrentEditingTool(agentState.tools[index]);
      setEditingToolIndex(index);
    } else {
      setCurrentEditingTool({
        id: uuidv4(),
        name: '',
        description: '',
        parameters: [],
        enabled: true
      });
      setEditingToolIndex(null);
    }
    setIsToolDialogOpen(true);
  }, [agentState.tools]);

  const handleSaveTool = useCallback((tool: FormTool) => {
    setAgentState(prev => ({
      ...prev,
      tools: editingToolIndex !== null && editingToolIndex >= 0
        ? prev.tools.map((t, i) => i === editingToolIndex ? tool : t)
        : [...prev.tools, tool]
    }));
    setIsToolDialogOpen(false);
    setEditingToolIndex(null);
    setCurrentEditingTool(null);
  }, [editingToolIndex]);

  const handleDeleteTool = useCallback((index: number) => {
    setToolToDelete(index);
    setIsConfirmDeleteOpen(true);
  }, []);

  const confirmDeleteTool = useCallback(() => {
    if (toolToDelete !== null) {
      setAgentState(prev => ({
        ...prev,
        tools: prev.tools.filter((_, i) => i !== toolToDelete)
      }));
      setIsConfirmDeleteOpen(false);
      setToolToDelete(null);
    }
  }, [toolToDelete]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }


  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">
          {id ? 'Editar Agente' : 'Novo Agente'}
        </h1>
        <div className="space-x-2">
          <Button variant="outline" onClick={() => navigate('/agentes')}>
            Cancelar
          </Button>
          <Button 
            onClick={handleSubmit} 
            disabled={isSaving}
            className="bg-primary text-primary-foreground hover:bg-primary/90"
          >
            {isSaving ? 'Salvando...' : 'Salvar Agente'}
          </Button>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Configuração do Agente</CardTitle>
            <CardDescription>
              Configure as informações básicas do seu agente
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Nome do Agente</Label>
                <Input
                  id="name"
                  value={agentState.name}
                  onChange={(e) => 
                    setAgentState({...agentState, name: e.target.value})
                  }
                  placeholder="Meu Agente"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="model">Modelo</Label>
                <Select
                  value={agentState.model}
                  onValueChange={(value) => 
                    setAgentState({...agentState, model: value})
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione um modelo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gemini-pro">Gemini Pro</SelectItem>
                    <SelectItem value="gpt-4">GPT-4</SelectItem>
                    <SelectItem value="claude-2">Claude 2</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Descrição</Label>
              <Textarea
                id="description"
                value={agentState.description}
                onChange={(e) => 
                  setAgentState({...agentState, description: e.target.value})
                }
                placeholder="Descreva o propósito do seu agente..."
                className="min-h-[100px]"
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Configurações de Geração</CardTitle>
            <CardDescription>
              Ajuste como o modelo gera respostas
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="temperature">Temperatura: {agentState.temperature}</Label>
              <Slider
                id="temperature"
                min={0}
                max={2}
                step={0.1}
                value={[agentState.temperature || 0.7]}
                onValueChange={([value]) => 
                  setAgentState({...agentState, temperature: value})
                }
              />
              <p className="text-sm text-muted-foreground">
                Valores mais altos tornam a saída mais aleatória.
              </p>
            </div>
            <div className="space-y-2">
              <Label htmlFor="maxTokens">Máximo de Tokens: {agentState.maxTokens}</Label>
              <Input
                id="maxTokens"
                type="number"
                min={1}
                max={8192}
                value={agentState.maxTokens}
                onChange={(e) => 
                  setAgentState({...agentState, maxTokens: Number(e.target.value)})
                }
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <div>
                <CardTitle>Ferramentas</CardTitle>
                <CardDescription>
                  Adicione e gerencie as ferramentas disponíveis para o agente
                </CardDescription>
              </div>
              <Button 
                type="button" 
                variant="outline"
                size="sm"
                onClick={() => openToolDialog()}
              >
                Adicionar Ferramenta
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {agentState.tools.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhuma ferramenta adicionada ainda.
              </div>
            ) : (
              <div className="space-y-2">
                {agentState.tools.map((tool, index) => (
                  <div key={tool.id} className="flex items-center justify-between p-3 border rounded-md">
                    <div>
                      <h4 className="font-medium">{tool.name}</h4>
                      <p className="text-sm text-muted-foreground line-clamp-1">
                        {tool.description || 'Sem descrição'}
                      </p>
                    </div>
                    <div className="flex space-x-2">
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => openToolDialog(index)}
                      >
                        Editar
                      </Button>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="text-destructive hover:text-destructive"
                        onClick={() => handleDeleteTool(index)}
                      >
                        Remover
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </form>

      {/* Tool Dialog */}
      <Dialog open={isToolDialogOpen} onOpenChange={setIsToolDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingToolIndex !== null ? 'Editar Ferramenta' : 'Nova Ferramenta'}
            </DialogTitle>
          </DialogHeader>
          {currentEditingTool && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="tool-name">Nome</Label>
                <Input
                  id="tool-name"
                  value={currentEditingTool.name}
                  onChange={(e) => 
                    setCurrentEditingTool({...currentEditingTool, name: e.target.value})
                  }
                  placeholder="Nome da ferramenta"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="tool-description">Descrição</Label>
                <Textarea
                  id="tool-description"
                  value={currentEditingTool.description}
                  onChange={(e) => 
                    setCurrentEditingTool({...currentEditingTool, description: e.target.value})
                  }
                  placeholder="Descrição da ferramenta"
                />
              </div>
            </div>
          )}
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setIsToolDialogOpen(false)}
            >
              Cancelar
            </Button>
            <Button 
              onClick={() => currentEditingTool && handleSaveTool(currentEditingTool)}
              disabled={!currentEditingTool?.name}
            >
              Salvar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={isConfirmDeleteOpen} onOpenChange={setIsConfirmDeleteOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmar Exclusão</DialogTitle>
            <DialogDescription>
              Tem certeza que deseja remover esta ferramenta? Esta ação não pode ser desfeita.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setIsConfirmDeleteOpen(false)}
            >
              Cancelar
            </Button>
            <Button 
              variant="destructive"
              onClick={confirmDeleteTool}
            >
              Remover
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Agentes;
