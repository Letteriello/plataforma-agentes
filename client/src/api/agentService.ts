import apiClient from '@/api/apiClient'
import type { LlmAgentConfig } from '@/types/adk'

/**
 * DTO for an agent in a list view (summary).
 */
export interface AgentSummaryDTO {
  id: string
  name: string
  description?: string
  type: 'LLM' | 'Workflow' | 'Custom' // Example agent types
}

/**
 * DTO for the detailed view of an agent, including its full configuration.
 */
export interface AgentDetailDTO extends LlmAgentConfig {
  id: string
}

/**
 * DTO for creating a new agent. The 'id' is omitted as it's generated by the backend.
 */
export type CreateAgentDTO = Omit<LlmAgentConfig, 'id'>

/**
 * DTO for updating an agent.
 */
export type UpdateAgentDTO = Partial<CreateAgentDTO>

/**
 * Fetches a list of all agents (summary view).
 */
export const fetchAgents = async (): Promise<AgentSummaryDTO[]> => {
  const { data } = await apiClient.get<AgentSummaryDTO[]>('/agents')
  return data
}

/**
 * Fetches the detailed configuration of a single agent by its ID.
 */
export const fetchAgentById = async (id: string): Promise<AgentDetailDTO> => {
  const { data } = await apiClient.get<AgentDetailDTO>(`/agents/${id}`)
  return data
}

/**
 * Creates a new agent with the given configuration.
 */
export const createAgent = async (
  payload: CreateAgentDTO,
): Promise<AgentDetailDTO> => {
  const { data } = await apiClient.post<AgentDetailDTO>('/agents', payload)
  return data
}

/**
 * Updates an existing agent's configuration.
 */
export const updateAgent = async (
  id: string,
  payload: UpdateAgentDTO,
): Promise<AgentDetailDTO> => {
  const { data } = await apiClient.put<AgentDetailDTO>(`/agents/${id}`, payload)
  return data
}

export const deleteAgent = async (id: string): Promise<void> => {
  await apiClient.delete(`/agents/${id}`)
}

export default {
  fetchAgents,
  fetchAgentById,
  createAgent,
  updateAgent,
  deleteAgent,
}
