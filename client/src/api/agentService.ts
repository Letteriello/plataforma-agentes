import apiClient from '@/api/apiClient';
import type { LlmAgentConfig } from '@/types/adk';
import type { ToolDTO } from './toolService'; // Added for agent tools

/**
 * DTO for an agent in a list view (summary).
 */
export interface AgentSummaryDTO {
  id: string
  name: string
  description?: string
  type: 'LLM' | 'Workflow' | 'Custom' // Example agent types
}

/**
 * DTO for the detailed view of an agent, including its full configuration.
 */
export interface AgentDetailDTO extends LlmAgentConfig {
  id: string
}

/**
 * DTO for creating a new agent. The 'id' is omitted as it's generated by the backend.
 */
export type CreateAgentDTO = Omit<LlmAgentConfig, 'id'>

/**
 * DTO for updating an agent.
 */
export type UpdateAgentDTO = Partial<CreateAgentDTO>

/**
 * Fetches a list of all agents (summary view).
 */
export const fetchAgents = async (): Promise<AgentSummaryDTO[]> => {
  const { data } = await apiClient.get<AgentSummaryDTO[]>('/agents')
  return data
}

/**
 * Fetches the detailed configuration of a single agent by its ID.
 */
export const fetchAgentById = async (id: string): Promise<AgentDetailDTO> => {
  const { data } = await apiClient.get<any>(`/agents/${id}`); // Get as 'any' first
  // The backend returns tools as ToolResponseSchema[], map them to string[] of IDs
  // Also, ensure all fields expected by AgentDetailDTO are correctly mapped.
  // If AgentDetailDTO extends LlmAgentConfig, and LlmAgentConfig expects tools: string[], this is correct.
  const agentData: AgentDetailDTO = {
    ...data,
    tools: data.tools?.map((tool: any) => tool.id) || [], // Ensure 'tools' is string[]
  };
  return agentData;
};

/**
 * Creates a new agent with the given configuration.
 */
export const createAgent = async (
  payload: CreateAgentDTO,
): Promise<AgentDetailDTO> => {
  const { data } = await apiClient.post<AgentDetailDTO>('/agents', payload)
  return data
}

/**
 * Updates an existing agent's configuration.
 */
export const updateAgent = async (
  id: string,
  payload: UpdateAgentDTO,
): Promise<AgentDetailDTO> => {
  const { data } = await apiClient.put<AgentDetailDTO>(`/agents/${id}`, payload)
  return data
}

export const deleteAgent = async (id: string): Promise<void> => {
  await apiClient.delete(`/agents/${id}`)
}

/**
 * Associates a tool with an agent.
 */
export const associateToolWithAgent = async (
  agentId: string,
  toolId: string,
): Promise<any> => { // The backend returns a Dict[str, Any] which can be { message: string, association: object }
  const { data } = await apiClient.post(`/agents/${agentId}/tools/${toolId}`);
  return data;
};

/**
 * Disassociates a tool from an agent.
 */
export const disassociateToolFromAgent = async (
  agentId: string,
  toolId: string,
): Promise<any> => { // The backend returns a Dict[str, str] which can be { message: string }
  const { data } = await apiClient.delete(`/agents/${agentId}/tools/${toolId}`);
  return data;
};

/**
 * Fetches all tools associated with a specific agent.
 */
export const getAgentTools = async (agentId: string): Promise<ToolDTO[]> => {
  const { data } = await apiClient.get<ToolDTO[]>(`/agents/${agentId}/tools`);
  return data;
};

export default {
  fetchAgents,
  fetchAgentById,
  createAgent,
  updateAgent,
  deleteAgent,
  associateToolWithAgent, // Added
  disassociateToolFromAgent, // Added
  getAgentTools, // Added
};
